#!/bin/sh

PATH=/bin:/sbin
IF=eth0
RSYNC_PARM="-vvxra --specials --devices --progress -c"

msg() {
	echo "[*] $@"
}

shell() {
	echo ""
	echo "Values:"
	echo "CMDLINE    = \"${CMDLINE}\""
	echo "SERVER     = \"${SERVER}\""
	echo "HOOKS      = \"${HOOKS}\""
	echo "IF         = \"${IF}\""
	echo "MAC        = \"${MAC}\""
	echo "MODULES    = \"${MODULES}\""
	echo "BASESYSTEM = \"${BASESYSTEM}\""
	echo "SWAPSIZE   = \"${SWAPSIZE}\""
	echo "RSYNC      = \"${RSYNC_PARM} ${RSYNC_EXTRA}\""
	echo "RESUME     = \"${RESUME}\""
	echo ""
	echo "You are being dropped to a shell"
	echo "Continue booting by typing \"exit\""
	/bin/sh
}

start_process() {
	echo -n "[*] $1... "
}

end_process() {
	echo "done."
}

error_msg() {
	echo ""
	echo "[!] $@"
}

error_process() {
	echo "$@"
	sleep 15
	reboot -f
}

error() {
	error_msg "$1"
	shell
}

break_on_hook() {
	if [ $(echo $HOOKS | grep $1 | wc -l) -eq 1 ] ; then
		msg "Hook \"$1\" found"
		shell
	else
		msg "Hook \"$1\" skipped"
	fi

}

parse() {
	CMDLINE=$(cat /proc/cmdline)
	for PARAM in ${CMDLINE}; do
		case ${PARAM} in
			server=*)
				SERVER=${PARAM#server=}
				;;
			hooks=*)
				HOOKS=${PARAM#hooks=}
				;;
			interface=*)
				IF=${PARAM#interface=}
				;;
			mac=*)
				MAC=${PARAM#mac=}
				;;
			ip=*)
				IP=${PARAM#ip=}
				;;
			modules=*) 
				MODULES=${PARAM#modules=}
				;;
			root=*)
				ROOT=${PARAM#root=}
				;;
			rsync_extra=*)
				RSYNC_EXTRA=${PARAM#rsync_extra=}
				;;
			resume=*)
				RESUME=${PARAM#resume=}
				;;
		esac
	done
}

obtain_mac() {
	if [ -z "${MAC}" ] ; then
		MAC=$(cat /sys/class/net/${IF}/address | sed 's/://g')
	fi
}

load_modules() {
	/sbin/depmod -a || error_process "could not depmod"
	for mod in $(echo ${MODULES} | sed -r 's/,/ /g'); do
		/sbin/modprobe -f $mod || error_process "could not load $mod"
	done
}

config_network() {
	obtain_mac || return 1
	ifconfig lo up
	ifconfig ${IF} ${IP} || error_process "setting ip failed"
}

load_config(){
	rsync -vvra rsync://${SERVER}/configs/${MAC}/config /tmp || error_process "getting config failed"
	BASESYSTEM=$(cat /tmp/config | head -n1 | tail -n1)
	SWAPSIZE=$(cat /tmp/config | head -n2 | tail -n1)
}

mountroot() {
	mount -t ext3 ${ROOT} /root || return 1
}

resume() {
	echo ${RESUME} > /sys/power/resume
}

sync_basesystem() {
	rsync ${RSYNC_PARM} ${RSYNC_EXTRA} --delete rsync://${SERVER}/basesystems/${BASESYSTEM}/ /root
}

sync_overlay() {
	rsync ${RSYNC_PARM} ${RSYNC_EXTRA} rsync://${SERVER}/overlays/${MAC}/ /root
}

create_devices() {
	mknod /root/dev/console c 5 1
	mknod /root/dev/zero c 1 3
	mknod /root/dev/null c 1 5
}

check_environment() {
	if [ -z "${SERVER}" ] ; then 
		error_msg  "No server specified"
		echo "No server path was specified."
		echo "I don't know what to sync with"
		echo "Please edit the local grub.conf (or menu.lst)"
		echo "or hit [e] at the bootloader's screen"
		echo "and pass server=user@ip:/path"
		return 1
	fi
	
	if [ -z "${IP}" ] ; then 
		error_msg  "No IP defined"
		echo "No IP for this machine was specified."
		echo "Can't access the network."
		echo "Please edit the local grub.conf (or menu.lst)"
		echo "or hit [e] at the bootloader's screen"
		echo "and pass ip=xxx.xxx.xxx.xxx"
		return 1
	fi
}

hang() {
	error_msg "Booting failed"
	echo ""
	echo "It seems like the remote filesystem"
	echo "was not successfully synchronized"
	echo "with the local hard disk."
	echo "The system has been prepared to be powered off."
	echo "Check your configurations and paths."
	while true; do
		shell
	done
}


msg "Setting up presync environment"
/bin/busybox mount -t proc none /proc || error "Mounting procfs"
/bin/busybox mount -t sysfs none /sys || error "Mounting sysfs"
start_process "Creating devices"
/bin/busybox mdev -s  || error_process "failed"
echo /sbin/mdev > /proc/sys/kernel/hotplug
end_process

start_process "Populating /bin"
/bin/busybox --install || error_process "failed"
end_process

start_process "Parsing commandline"
parse || error_process
end_process


break_on_hook "early"

start_process "Sanitizing"
check_environment || error_process
end_process

break_on_hook "modules"

load_modules || error_process
end_process

start_process "Sleeping for modules"
sleep 5
end_process

break_on_hook "resume"

start_process "Checking for resume"
resume || error_process "not found"
end_process

break_on_hook "network"

start_process "Configuring network"
config_network || error_process
end_process

break_on_hook "config"

start_process "Loading configuration"
load_config || error_process
end_process

break_on_hook "mount"

start_process "Mounting hard disk"
mountroot || error_process "failed"
end_process

break_on_hook "sync"

start_process "Syncing"
sync_basesystem || error_process "failed"
break_on_hook "sync2"
sync_overlay || error_process "failed"
end_process

start_process "Sanitizing image"
create_devices
end_process

break_on_hook "boot"

start_process "Booting system"
exec switch_root /root /sbin/init ${CMDLINE}

hang
